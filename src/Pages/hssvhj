<div className=' overflow-y-auto   p-5'>
    {
    selectedCategory === 'personal details' && (
    <div className='flex flex-col gap-2'>
        {/* name */}
        <div>
            <label htmlFor="name" className="block text-sm lg:text-lg font-medium text-gray-900">
                Name
            </label>
            <input type="text" id="name"
                className="bg-white border border-white text-gray-900 text-sm lg:text-lg rounded-lg block w-full p-2.5"
                placeholder="John" value={studentData ? studentData[0].name : '' } required />
        </div>

        {/* place */}
        <div>
            <label htmlFor="place" className="block text-sm lg:text-lg font-medium text-gray-900">
                Place
            </label>
            <input type="text" id="place"
                className="bg-white border border-white text-gray-900 text-sm lg:text-lg rounded-lg block w-full p-2.5"
                placeholder="Kochi" value={studentData ? studentData[0].place : '' } />
        </div>

        {/* dob */}
        <div>
            <label htmlFor="dob" className="block text-sm lg:text-lg font-medium text-gray-900">
                Date of Birth
            </label>
            <input type="date" id="dob"
                className="bg-white border border-white text-gray-900 text-sm lg:text-lg rounded-lg block w-full p-2.5"
                value={studentData ? new Date(studentData[0].dob).toISOString().split('T')[0] : '' } />
        </div>

        {/* phone no */}
        <div>
            <label htmlFor="phone" className="block text-sm lg:text-lg font-medium text-gray-900">
                Phone
            </label>
            <input type="text" id="phone"
                className="bg-white border border-white text-gray-900 text-sm lg:text-lg rounded-lg block w-full p-2.5"
                placeholder="9876543210" value={studentData ? studentData[0].phoneNumber : '' } />
        </div>

        {/* parent phone no */}
        <div>
            <label htmlFor="parentPhone" className="block text-sm lg:text-lg font-medium text-gray-900">
                Parent Phone
            </label>
            <input type="text" id="parentPhone"
                className="bg-white border border-white text-gray-900 text-sm lg:text-lg rounded-lg block w-full p-2.5"
                placeholder="9876543210" value={studentData ? studentData[0].parentNumber : '' } />
        </div>

        {/* email */}
        <div>
            <label htmlFor="email" className="block text-sm lg:text-lg font-medium text-gray-900">
                Email
            </label>
            <input type="email" id="email"
                className="bg-white border border-white text-gray-900 text-sm lg:text-lg rounded-lg block w-full p-2.5"
                placeholder="" value={studentData ? studentData[0].email : '' } />
        </div>
    </div>
    )
    }

    {selectedCategory === 'academic details' && (
    <div className='flex flex-col gap-2'>

        {/* admn no */}
        <div>
            <label htmlFor="admnNo" className="block text-sm lg:text-lg font-medium text-gray-900">
                Admission Number
            </label>
            <input type="text" id="admnNo"
                className="bg-white border border-white text-gray-900 text-sm lg:text-lg rounded-lg block w-full p-2.5"
                placeholder="123456" value={studentData ? studentData[0].admissionNumber : '' } />
        </div>

        {/* admission coordinator */}
        <div>
            <label htmlFor="admnCoordinator" className="block text-sm lg:text-lg font-medium text-gray-900">
                Admission Coordinator
            </label>
            <input type="text" id="admnCoordinator"
                className="bg-white border border-white text-gray-900 text-sm lg:text-lg rounded-lg block w-full p-2.5"
                placeholder="John Doe" value={studentData ? studentData[0].admissionCoordinator : '' } />
        </div>

        {/* year */}
        <div>
            <label htmlFor="year" className="block text-sm lg:text-lg font-medium text-gray-900">
                Year
            </label>
            <input type="text" id="year"
                className="bg-white border border-white text-gray-900 text-sm lg:text-lg rounded-lg block w-full p-2.5"
                placeholder="2022" value={studentData ? studentData[0].year : '' } />
        </div>

        {/* intake */}
        <div>
            <label htmlFor="intake" className="block text-sm lg:text-lg font-medium text-gray-900">
                Intake
            </label>
            <Select options={intakeOptions} styles={{ control: (baseStyles, state)=> ({
                ...baseStyles,
                borderRadius: '.5rem',
                padding: '0.4rem',
                borderWidth: '0px',
                backgroundColor: 'RGB(255, 255, 255)',
                }),
                }}
                className="border-white text-sm lg:text-lg"
                closeMenuOnSelect={true}
                isSearchable={false}
                onChange={(e) => setIntake(e.value)}
                name="intake"
                value={selectedIntakeOption}
                controlShouldRenderValue={
                intake ? true : intake === false ? true : false
                }
                />
        </div>

        {/* course */}
        <div>
            <label htmlFor="course" className="block text-sm lg:text-lg font-medium text-gray-900">
                Course
            </label>
            <Select options={courseOptions} styles={{ control: (baseStyles, state)=> ({
                ...baseStyles,
                borderRadius: '.5rem',
                padding: '0.4rem',
                borderWidth: '0px',
                backgroundColor: 'RGB(255, 255, 255)',
                }),
                }}
                className="border-white text-sm lg:text-lg"
                value={selectedCourseOption}
                closeMenuOnSelect={true}
                isSearchable={false}
                onChange={(e) => setCourse(e.value)}
                name="feeType"
                controlShouldRenderValue={
                course ? true : course === false ? true : false
                }
                />
        </div>

        {/* if course === pluatwo then batch */}
        {course === "Plustwo" && (
        <div>
            <label htmlFor="batch" className="block text-sm lg:text-lg font-medium text-gray-900">
                Batch
            </label>
            <Select options={batchOptions} styles={{ control: (baseStyles, state)=> ({
                ...baseStyles,
                borderRadius: '.5rem',
                padding: '0.4rem',
                borderWidth: '0px',
                backgroundColor: 'RGB(255, 255, 255)',
                }),
                }}
                className="border-white text-sm lg:text-lg"
                value={selectedBatchOption}
                closeMenuOnSelect={true}
                isSearchable={false}
                onChange={(e) => setBatch(e.value)}
                name="batch"
                controlShouldRenderValue={
                batch ? true : batch === false ? true : false
                }
                />
        </div>
        )}

        {/* mode */}
        <div>
            <label htmlFor="mode" className="block text-sm lg:text-lg font-medium text-gray-900">
                Mode
            </label>
            <Select options={modeOptions} styles={{ control: (baseStyles, state)=> ({
                ...baseStyles,
                borderRadius: '.5rem',
                padding: '0.4rem',
                borderWidth: '0px',
                backgroundColor: 'RGB(255, 255, 255)',
                }),
                }}
                className="border-white text-sm lg:text-lg"
                closeMenuOnSelect={true}
                isSearchable={false}
                onChange={(e) => setMode(e.value)}
                name="mode"
                value={selectedModeOption}
                controlShouldRenderValue={
                mode ? true : mode === false ? true : false
                }
                />
        </div>

        {/* branch */}
        <div>
            <label htmlFor="branch" className="block text-sm lg:text-lg font-medium text-gray-900">
                Branch
            </label>
            <Select options={branchOptions} styles={{ control: (baseStyles, state)=> ({
                ...baseStyles,
                borderRadius: '.5rem',
                padding: '0.4rem',
                borderWidth: '0px',
                backgroundColor: 'RGB(255, 255, 255)',
                }),
                }}
                className="border-white text-sm lg:text-lg"
                closeMenuOnSelect={true}
                isSearchable={false}
                onChange={(e) => setBranch(e.value)}
                name="branch"
                value={selectedBranchOption}
                controlShouldRenderValue={
                branch ? true : branch === false ? true : false
                }
                />
        </div>

        {/* reference no */}
        <div>
            <label htmlFor="referenceNo" className="block text-sm lg:text-lg font-medium text-gray-900">
                Reference Number
            </label>
            <input type="text" id="referenceNo"
                className="bg-white border border-white text-gray-900 text-sm lg:text-lg rounded-lg block w-full p-2.5"
                placeholder="123456" value={referenceNo} onChange={(e)=> setReferenceNo(e.target.value)}
            />
        </div>

        {/* enrollment no */}
        <div>
            <label htmlFor="enrollmentNo" className="block text-sm lg:text-lg font-medium text-gray-900">
                Enrollment Number
            </label>
            <input type="text" id="enrollmentNo"
                className="bg-white border border-white text-gray-900 text-sm lg:text-lg rounded-lg block w-full p-2.5"
                placeholder="123456" value={enrollmentNo} onChange={(e)=> setEnrollmentNo(e.target.value)}
            />
        </div>

        {/* registration status */}
        <div>
            <label htmlFor="registrationStatus" className="block text-sm lg:text-lg font-medium text-gray-900">
                Registration Status
            </label>
            <input type="text" id="registrationStatus"
                className="bg-white border border-white text-gray-900 text-sm lg:text-lg rounded-lg block w-full p-2.5"
                placeholder="Registered" value={registrationStatus} onChange={(e)=>
            setRegistrationStatus(e.target.value)}
            />
        </div>

        {/* academic status */}
        <div>
            <label htmlFor="academicStatus" className="block text-sm lg:text-lg font-medium text-gray-900">
                Academic Status
            </label>
            <Select options={academicStatusOptions} styles={{ control: (baseStyles, state)=> ({
                ...baseStyles,
                borderRadius: '.5rem',
                padding: '0.4rem',
                borderWidth: '0px',
                backgroundColor: 'RGB(255, 255, 255)',
                }),
                }}
                className="border-white text-sm lg:text-lg"
                closeMenuOnSelect={true}
                isSearchable={false}
                onChange={(e) => setAcademicStatus(e.value)}
                name="academicStatus"
                value={selectedAcademicStatusOption}
                controlShouldRenderValue={
                academicStatus ? true : academicStatus === false ? true : false
                }
                />
        </div>

        {/* stream */}
        <div>
            <label htmlFor="stream" className="block text-sm lg:text-lg font-medium text-gray-900">
                Stream
            </label>
            <Select options={streamOptions} styles={{ control: (baseStyles, state)=> ({
                ...baseStyles,
                borderRadius: '.5rem',
                padding: '0.4rem',
                borderWidth: '0px',
                backgroundColor: 'RGB(255, 255, 255)',
                }),
                }}
                className="border-white text-sm lg:text-lg"
                closeMenuOnSelect={true}
                isSearchable={false}
                onChange={(e) => setStream(e.value)}
                name="stream"
                value={selectedStreamOption}
                controlShouldRenderValue={
                stream ? true : stream === false ? true : false
                }
                />
        </div>

        {
        academicStatus === 'Cancelled' && (
        <div>
            <label htmlFor="reason" className="block text-sm lg:text-lg font-medium text-gray-900">
                Reason
            </label>
            <input type="text" id="reason"
                className="bg-white border border-white text-gray-900 text-sm lg:text-lg rounded-lg block w-full p-2.5"
                placeholder="Reason for cancellation" />
        </div>

        )
        }

    </div>
    )
    }
</div>